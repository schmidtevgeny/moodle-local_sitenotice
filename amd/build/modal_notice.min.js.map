{"version":3,"file":"modal_notice.min.js","sources":["../src/modal_notice.js"],"sourcesContent":["/**\n * Notice modal.\n * @author     Nathan Nguyen <nathannguyen@catalyst-au.net>\n * @copyright  Catalyst IT\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/notification', 'core/modal', 'core/key_codes', 'core/str'],\n    function($, Notification, Modal, KeyCodes, str) {\n\n        var SELECTORS = {\n            CLOSE_BUTTON: '[data-action=\"close\"]',\n            ACCEPT_BUTTON: '[data-action=\"accept\"]',\n            ACK_CHECKBOX: 'sitenotice-modal-ackcheckbox',\n            CAN_RECEIVE_FOCUS: 'input:not([type=\"hidden\"]), a[href], button:not([disabled])',\n            TOOL_TIP_WRAPPER: '#tooltip-wrapper',\n        };\n\n        var ATTRIBUTE = {\n            NOTICE_ID: 'data-noticeid',\n            REQUIRED_ACKNOWLEDGE: 'data-noticereqack',\n        };\n\n        class ModalNotice extends Modal {\n\n            static TYPE = 'local_sitenotice';\n\n            static TEMPLATE = 'local_sitenotice/modal_notice';\n\n            constructor(root) {\n                super(root);\n\n                if (!this.getFooter().find(SELECTORS.CLOSE_BUTTON).length) {\n                    Notification.exception({message: 'No close button found'});\n                }\n\n                if (!this.getFooter().find(SELECTORS.ACCEPT_BUTTON).length) {\n                    Notification.exception({message: 'No accept button found'});\n                }\n            }\n\n            /**\n             * Get ID of close button.\n             * @returns {string}\n             */\n            getCloseButtonID = function() {\n                return '#' + this.getFooter().find(SELECTORS.CLOSE_BUTTON).attr('id');\n            };\n\n            /**\n             * Get ID of accept button.\n             * @returns {string}\n             */\n            getAcceptButtonID = function() {\n                return '#' + this.getFooter().find(SELECTORS.ACCEPT_BUTTON).attr('id');\n            };\n\n            /**\n             * Get ID of accept button.\n             * @returns {string}\n             */\n            getAckCheckboxID = function() {\n                return '#' + SELECTORS.ACK_CHECKBOX;\n            };\n\n            /**\n             * Set Notice ID to the current modal.\n             * @param {Integer} noticeid\n             */\n            setNoticeId = function(noticeid) {\n                this.getModal().attr(ATTRIBUTE.NOTICE_ID, noticeid);\n            };\n\n            /**\n             * Get the current notice id.\n             * @returns {*}\n             */\n            getNoticeId = function() {\n                return this.getModal().attr(ATTRIBUTE.NOTICE_ID);\n            };\n\n            /**\n             * Add Checkbox if the notice requires acknowledgement.\n             * @param {Integer} reqack\n             */\n            setRequiredAcknowledgement = function(reqack) {\n                var modal = this;\n                if (reqack == 1) {\n                    str.get_string('modal:checkboxtext', 'local_sitenotice').then(function(langString) {\n                        var body = modal.getBody();\n                        var checkboxdiv = $(\"<div>\", {});\n                        var ackcheckbox = $(\"<input>\", {type: \"checkbox\", id: SELECTORS.ACK_CHECKBOX});\n                        var labelspan = $(\"<span>\", {\"class\": \"checkboxlabel\"});\n                        labelspan.append(langString);\n                        checkboxdiv.append(ackcheckbox);\n                        checkboxdiv.append(labelspan);\n                        body.append(checkboxdiv);\n                        var acceptbutton = modal.getFooter().find(SELECTORS.ACCEPT_BUTTON);\n                        acceptbutton.show();\n                        acceptbutton.attr('disabled', true);\n                        // Tooltip for disabled box.\n                        modal.getFooter().find(SELECTORS.TOOL_TIP_WRAPPER).tooltip();\n                    }).catch(Notification.exception);\n                } else {\n                    this.getFooter().find(SELECTORS.ACCEPT_BUTTON).css('display', 'none');\n                }\n            };\n\n            /**\n             * Turn off tool tip\n             */\n            turnoffToolTip = function() {\n                this.getFooter().find(SELECTORS.TOOL_TIP_WRAPPER).tooltip('disable');\n            };\n\n            /**\n             * Turn on tool tip\n             */\n            turnonToolTip = function() {\n                this.getFooter().find(SELECTORS.TOOL_TIP_WRAPPER).tooltip('enable');\n            };\n\n            /**\n             * Remove escape key event.\n             */\n            registerEventListeners = function() {\n                $(document).on('keydown', function(e) {\n                    if (!this.isVisible()) {\n                        return;\n                    }\n\n                    if (e.keyCode == KeyCodes.tab) {\n                        this.handleTabLock(e);\n                    }\n\n                }.bind(this));\n\n                $(document).on('mousedown', function(e) {\n                    if (!this.isVisible()) {\n                        return;\n                    }\n                    e.preventDefault();\n\n                }.bind(this));\n            };\n\n            /**\n             * CAN_RECEIVE_FOCUS in modal.js does not check if the disabled or hidden button\n             * @param {Event} e\n             */\n            handleTabLock = function(e) {\n                var target = $(document.activeElement);\n\n                var focusableElements = this.modal.find(SELECTORS.CAN_RECEIVE_FOCUS).filter(\":visible\");\n                var firstFocusable = focusableElements.first();\n                var lastFocusable = focusableElements.last();\n\n                var focusable = false;\n                var previous = 0;\n                focusableElements.each(function(index) {\n                    if (target.is(this)) {\n                        focusable = true;\n                        previous = index;\n                    }\n                });\n\n                // Focus to first element.\n                if (focusable == false) {\n                    e.preventDefault();\n                    firstFocusable.focus();\n                    return;\n                } else {\n                    if (target.is(firstFocusable) && e.shiftKey) {\n                        lastFocusable.focus();\n                        e.preventDefault();\n                    } else if (target.is(lastFocusable) && !e.shiftKey) {\n                        firstFocusable.focus();\n                        e.preventDefault();\n                    } else {\n                        if (!e.shiftKey) {\n                            var next = focusableElements.get(previous + 1);\n                        } else {\n                            var next = focusableElements.get(previous - 1);\n                        }\n                        next.focus();\n                        e.preventDefault();\n                    }\n                }\n            };\n        }\n\n        return ModalNotice;\n    }\n);\n"],"names":["define","$","Notification","Modal","KeyCodes","str","SELECTORS","ATTRIBUTE","constructor","root","this","getFooter","find","length","exception","message","getCloseButtonID","attr","getAcceptButtonID","getAckCheckboxID","setNoticeId","noticeid","getModal","getNoticeId","setRequiredAcknowledgement","reqack","modal","get_string","then","langString","body","getBody","checkboxdiv","ackcheckbox","type","id","labelspan","append","acceptbutton","show","tooltip","catch","css","turnoffToolTip","turnonToolTip","registerEventListeners","document","on","e","isVisible","keyCode","tab","handleTabLock","bind","preventDefault","target","activeElement","focusableElements","filter","firstFocusable","first","lastFocusable","last","focusable","previous","each","index","is","focus","shiftKey","next","get"],"mappings":";;;;;;AAOAA,uCAAO,CAAC,SAAU,oBAAqB,aAAc,iBAAkB,aACnE,SAASC,EAAGC,aAAcC,MAAOC,SAAUC,SAEnCC,uBACc,wBADdA,wBAEe,yBAFfA,uBAGc,+BAHdA,4BAImB,8DAJnBA,2BAKkB,mBAGlBC,oBACW,qCAIWJ,kBAER,mCAEI,gCAElBK,YAAYC,YACFA,MAEDC,KAAKC,YAAYC,KAAKN,wBAAwBO,QAC/CX,aAAaY,UAAU,CAACC,QAAS,0BAGhCL,KAAKC,YAAYC,KAAKN,yBAAyBO,QAChDX,aAAaY,UAAU,CAACC,QAAS,2BAQzCC,iBAAmB,iBACR,IAAMN,KAAKC,YAAYC,KAAKN,wBAAwBW,KAAK,OAOpEC,kBAAoB,iBACT,IAAMR,KAAKC,YAAYC,KAAKN,yBAAyBW,KAAK,OAOrEE,iBAAmB,iBACR,IAAMb,wBAOjBc,YAAc,SAASC,eACdC,WAAWL,KAAKV,oBAAqBc,WAO9CE,YAAc,kBACHb,KAAKY,WAAWL,KAAKV,sBAOhCiB,2BAA6B,SAASC,YAC9BC,MAAQhB,KACE,GAAVe,OACApB,IAAIsB,WAAW,qBAAsB,oBAAoBC,MAAK,SAASC,gBAC/DC,KAAOJ,MAAMK,UACbC,YAAc/B,EAAE,QAAS,IACzBgC,YAAchC,EAAE,UAAW,CAACiC,KAAM,WAAYC,GAAI7B,yBAClD8B,UAAYnC,EAAE,SAAU,OAAU,kBACtCmC,UAAUC,OAAOR,YACjBG,YAAYK,OAAOJ,aACnBD,YAAYK,OAAOD,WACnBN,KAAKO,OAAOL,iBACRM,aAAeZ,MAAMf,YAAYC,KAAKN,yBAC1CgC,aAAaC,OACbD,aAAarB,KAAK,YAAY,GAE9BS,MAAMf,YAAYC,KAAKN,4BAA4BkC,aACpDC,MAAMvC,aAAaY,gBAEjBH,YAAYC,KAAKN,yBAAyBoC,IAAI,UAAW,SAOtEC,eAAiB,gBACRhC,YAAYC,KAAKN,4BAA4BkC,QAAQ,YAM9DI,cAAgB,gBACPjC,YAAYC,KAAKN,4BAA4BkC,QAAQ,WAM9DK,uBAAyB,WACrB5C,EAAE6C,UAAUC,GAAG,UAAW,SAASC,GAC1BtC,KAAKuC,aAIND,EAAEE,SAAW9C,SAAS+C,UACjBC,cAAcJ,IAGzBK,KAAK3C,OAEPT,EAAE6C,UAAUC,GAAG,YAAa,SAASC,GAC5BtC,KAAKuC,aAGVD,EAAEM,kBAEJD,KAAK3C,QAOX0C,cAAgB,SAASJ,OACjBO,OAAStD,EAAE6C,SAASU,eAEpBC,kBAAoB/C,KAAKgB,MAAMd,KAAKN,6BAA6BoD,OAAO,YACxEC,eAAiBF,kBAAkBG,QACnCC,cAAgBJ,kBAAkBK,OAElCC,WAAY,EACZC,SAAW,KACfP,kBAAkBQ,MAAK,SAASC,OACxBX,OAAOY,GAAGzD,QACVqD,WAAY,EACZC,SAAWE,UAKF,GAAbH,iBACAf,EAAEM,sBACFK,eAAeS,WAGXb,OAAOY,GAAGR,iBAAmBX,EAAEqB,SAC/BR,cAAcO,QACdpB,EAAEM,sBACC,GAAIC,OAAOY,GAAGN,iBAAmBb,EAAEqB,SACtCV,eAAeS,QACfpB,EAAEM,qBACC,IACEN,EAAEqB,SAGCC,KAAOb,kBAAkBc,IAAIP,SAAW,YAFxCM,KAAOb,kBAAkBc,IAAIP,SAAW,GAIhDM,KAAKF,QACLpB,EAAEM"}